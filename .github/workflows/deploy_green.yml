name: Get Image and Version from yml file

on:
  workflow_dispatch:
jobs:
  get-and-run:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        path: deployment-config
        
    - name: Get Version from config 
      id: getVersion1
      uses: mikefarah/yq@master
      with:
        cmd: yq '.spec.template.metadata.labels.version' 'deployment-config/go-app1/go-app1-blue-deploy.yaml'
        
    - name: Get Image from config 
      id: getImage1
      uses: mikefarah/yq@master
      with:
        cmd: yq '.spec.template.spec.containers[0].image' 'deployment-config/go-app1/go-app1-blue-deploy.yaml'
        
    - name: Get Version from config 
      id: getVersion2
      uses: mikefarah/yq@master
      with:
        cmd: yq '.spec.template.metadata.labels.version' 'deployment-config/go-app2/go-app2-blue-deploy.yaml'
        
    - name: Get Image from config 
      id: getImage2
      uses: mikefarah/yq@master
      with:
        cmd: yq '.spec.template.spec.containers[0].image' 'deployment-config/go-app2/go-app2-blue-deploy.yaml'

    - name: Echo version and image
      run: |
       echo ${{ steps.getVersion.outputs.result }}
       echo ${{ steps.getImage.outputs.result }}
        
    - name: Update Version and Image to config 
      uses: mikefarah/yq@master
      with:
        cmd: | 
         yq -i '.spec.template.metadata.labels.version = "${{ steps.getVersion1.outputs.result }}" | .spec.template.spec.containers[0].image = "${{ steps.getImage1.outputs.result }}"' 'deployment-config/go-app1/go-app1-green-deploy.yaml'
         yq -i '.spec.template.metadata.labels.version = "${{ steps.getVersion2.outputs.result }}" | .spec.template.spec.containers[0].image = "${{ steps.getImage2.outputs.result }}"' 'deployment-config/go-app2/go-app2-green-deploy.yaml'

    - name: Commit and push changes
      env:
        GITHUB_EMAIL: satvik@eltropy.com
        GITHUB_NAME: deploy-green
      run: |
       cd deployment-config
       git config user.email ${GITHUB_EMAIL}
       git config user.name ${GITHUB_NAME}
       git commit -am "Make changes to green deployment"
       git push
       
    - name: Get and run argoCD
      env:
        ARGOCD_SERVER: a921f0de06e1c4349b6e6f54cd8d3cec-1309917555.us-west-2.elb.amazonaws.com
        ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
      run: |
        curl --insecure -sSL -o /usr/local/bin/argocd https://${ARGOCD_SERVER}/download/argocd-linux-amd64
        chmod 755 /usr/local/bin/argocd
        # argocd app sync go-example-app --insecure
        # argocd app wait go-example-app --insecure
        argocd app sync go-app1 --insecure
        argocd app wait go-app1 --insecure
        argocd app sync go-app2 --insecure
        argocd app wait go-app2 --insecure
